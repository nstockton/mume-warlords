[build-system]
	requires = [
		"poetry-core==2.0.1",
		"poetry-dynamic-versioning==1.6.0",
	]
	build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry]
	name = "mume-warlords"
	version = "0.0.0"
	description = "Exports the warlords list from MUME to JSON format."
	authors = ["Nick Stockton <nstockton@users.noreply.github.com>"]
	license = "MPL-2.0"
	readme = "README.md"
	homepage = "https://github.com/nstockton/mume-warlords"
	repository = "https://github.com/nstockton/mume-warlords"
	keywords = ["mume", "warlords"]
	classifiers = [
		"Development Status :: 5 - Production/Stable",
		"Environment :: Console",
		"Intended Audience :: Developers",
		"License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
		"Programming Language :: Python",
		"Programming Language :: Python :: 3",
		"Programming Language :: Python :: 3 :: Only",
		"Programming Language :: Python :: 3.9",
		"Programming Language :: Python :: 3.10",
		"Programming Language :: Python :: 3.11",
		"Programming Language :: Python :: 3.12",
		"Programming Language :: Python :: Implementation",
		"Programming Language :: Python :: Implementation :: CPython",
		"Operating System :: MacOS",
		"Operating System :: MacOS :: MacOS X",
		"Operating System :: Microsoft",
		"Operating System :: Microsoft :: Windows",
		"Operating System :: OS Independent",
		"Operating System :: POSIX",
		"Operating System :: POSIX :: BSD",
		"Operating System :: POSIX :: Linux",
		"Operating System :: Unix",
		"Topic :: Utilities",
	]
	packages = [
		{include = "warlords", from = "src"},
	]
	include = [
		{path = "tests/*", format = "sdist"},
		{path = "poetry.lock", format = "sdist"},
	]
	exclude = []

[tool.poetry.dependencies]
	python = "^3.9"
	beautifulsoup4 = "^4.12"
	fastjsonschema = "2.21.1"
	requests = {version = "^2.32", extras = ["security"]}

[tool.poetry.group.dev.dependencies]
	mocket = "^3.13"
	poetry-dynamic-versioning = {version = "1.6.0", extras = ["plugin"]}
	pre-commit = "^3.5"
	python-magic-bin = {version = "^0.4", markers = "sys_platform == 'darwin' or sys_platform == 'win32'"}
	types-beautifulsoup4 = "^4.12"
	types-requests = "^2.32"

[tool.poetry.group.lint.dependencies]
	isort = "^5.13"
	mypy = "^1.14"
	ruff = "^0.9"

[tool.poetry.group.test.dependencies]
	coverage = {version = "^7.6", extras = ["toml"]}

[tool.poetry.scripts]
	warlords = "warlords.main:run"

[tool.poetry-dynamic-versioning]
	enable = true
	vcs = "git"
	format-jinja = "{% if distance == 0 %}{{ base }}{% else %}{{ base }}+{{ distance }}.g{{ commit|truncate(7,true,'') }}{% endif %}"

[tool.poetry-dynamic-versioning.substitution]
	files = [
		"src/*.py", "src/*/__init__.py", "src/*/__version__.py", "src/*/_version.py",
	]
	patterns = [
		"(^__version__(?:\\s*[:]\\s*str)?\\s*=\\s*['\"])[^'\"]*(['\"])",
	]

[tool.ruff]
	extend-include = [
		"*.pyw",
	]
	force-exclude = true
	line-length = 110

[tool.ruff.format]
	docstring-code-format = false
	indent-style = "tab"
	line-ending = "cr-lf"

[tool.ruff.lint]
	preview = true
	# select = ["E4", "E7", "E9", "F"]  # The default.
	select = ["ALL"]  # Enable all rules.
	extend-select = [
		"D213",  # Multi-line docstring summary should start at the second line.
	]
	ignore = [
		"ANN",  # Flake8-annotations. (We use MyPy for this)
		"ARG",  # Flake8-unused-arguments.
		"B019",  # Use of functools.lru_cache or functools.cache on methods can lead to memory leaks.
		"COM812",  # Trailing comma missing. (Conflicts with formatter)
		"D105",  # Missing docstring in magic method.
		"D206",  # Docstring should be indented with spaces, not tabs.
		"D212",  # Multi-line docstring summary should start at the first line.
		"EM",  # Flake8-errmsg.
		"G",  # Flake8-logging-format.
		"I",  # ISort. (We use ISort package for this)
		"ISC001",  # Implicitly concatenated string literals on one line. (Conflicts with formatter)
		"PT",  # Flake8-pytest-style.
		"T20",  # Flake8-print.
		"TCH",  # Flake8-type-checking.
		"TRY003",  # Avoid specifying long messages outside the exception class.
		"UP007",  # Use X | Y for type annotations. (I hate this syntax)
		"W191",  # Indentation contains tabs.
	]
	typing-modules = []
	unfixable = []

[tool.ruff.lint.flake8-builtins]
	# To stop Ruff complaining when a built-in name is used as a variable name, add the name to the list.
	builtins-ignorelist = []

[tool.ruff.lint.flake8-copyright]
	author = "Nick Stockton"
	min-file-size = 1  # Minimum file size (in bytes) in which to enforce copyright.

[tool.ruff.lint.flake8-implicit-str-concat]
	allow-multiline = false

[tool.ruff.lint.mccabe]
	max-complexity = 15

[tool.ruff.lint.per-file-ignores]
	"**/__init__.py" = ["D1"]
	"**/__main__.py" = ["D1"]
	"./tests/**" = ["D1", "PLR6301"]
	"**/typedef.py" = ["F401"]

[tool.ruff.lint.pydocstyle]
	convention = "google"
	ignore-decorators = ["typing.overload"]

[tool.ruff.lint.ruff]
	# Make it a violation to use a tuple in a subscript without parentheses.
	parenthesize-tuple-in-subscript = true

[tool.coverage.report]
	precision = 0
	fail_under = 100.0
	show_missing = true
	skip_covered = true
	sort = "Cover"
	exclude_lines = [
		'\#\s*pragma: no cover',
		'^\s*raise AssertionError\b',
		'^\s*raise NotImplementedError\b',
		'^\s*def __repr__',
		'^\s*def __str__',
		'^\s*if __name__ == .__main__.:',
	]

[tool.coverage.run]
	source = ["warlords"]
	omit = [
		"src/warlords/__main__.py",
	]

[tool.isort]
	line_length = 110  # The max length of an import line (used for wrapping long imports).
	color_output = false
	# Specify what extensions isort can be ran against.
	supported_extensions = ["py", "pyi", "pys", "pyw"]
	extend_skip = []  # List of files to skip.
	indent = "tab"  # String to place for indents.
	atomic = true  # Ensures the output doesn't save if the resulting file contains syntax errors.
	dedup_headings = true  # Only show an identical custom import heading comment once.
	multi_line_output = 3  # Vertical hanging indent for long sections of multiple imports.
	include_trailing_comma = true  # Include a trailing comma on multi line imports that include parentheses.
	force_grid_wrap = 0  # Only consider line length when forcing lines to be grid wrapped.
	use_parentheses = true  # Use parentheses for line continuation on length limit instead of slashes.
	ensure_newline_before_comments = true  # Insert a blank line before a comment following an import.
	indented_import_headings = false  # Do not include import headings inside indented imports.
	float_to_top = true  # Float all non-indented imports to the top of the file.
	lines_after_imports = 2  # Add this many lines after imports / before code begins.
	force_adds = false  # Do not force import adds if the original file is empty.
	from_first = false  # Show from imports after straight ones.
	combine_as_imports = false  # Combine as imports on the same line.
	order_by_type = true  # Order imports by type, which is determined by case, in addition to alphabetically.
	reverse_relative = true  # Reverse order of relative imports.
	add_imports = ["from __future__ import annotations"]  # Add the specified import lines to all files.
	default_section = "STDLIB"  # Set the default section for imports.
	# The heading to display for future imports.
	import_heading_future = "Future Modules:"
	# The heading to display for standard library imports.
	import_heading_stdlib = "Built-in Modules:"
	# The heading to display for third-party imports.
	import_heading_thirdparty = "Third-party Modules:"
	# Override known third-party imports.
	known_third_party = [
		"bs4",
		"fastjsonschema",
		"mocket",
		"requests",
	]
	# The heading to display for first-party imports.
	import_heading_firstparty = "Warlords Modules:"
	# Override known first-party imports.
	known_first_party = ["warlords"]
	# The heading to display for local imports.
	import_heading_localfolder = "Local Modules:"

[tool.mypy]
	files = ["src/warlords", "tests"]
	exclude = '^$'
	local_partial_types = true
	strict = true
	disallow_any_unimported = true
	disallow_any_decorated = true
	warn_unreachable = true
	show_error_codes = true
	no_color_output = true

[[tool.mypy.overrides]]
	module = "tests.*"
	disallow_any_decorated = false

[[tool.mypy.overrides]]
	module = [
		"fastjsonschema.*",
		"mocket.*",
	]
	ignore_missing_imports = true
